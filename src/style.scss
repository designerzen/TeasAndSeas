
$padding:12px;
$border-radius:4px;

@import "./sanitize.scss";

/// CUSTOM STYLES --------------------
/* latin-ext */
@font-face {
  font-family: 'Work Sans';
  font-style: normal;
  font-weight: 400;
  src: local('Work Sans'), local('WorkSans-Regular'), url(https://fonts.gstatic.com/s/worksans/v3/QGYsz_wNahGAdqQ43Rh_cqDpp_k.woff2) format('woff2');
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}
/* latin */
@font-face {
  font-family: 'Work Sans';
  font-style: normal;
  font-weight: 400;
  src: local('Work Sans'), local('WorkSans-Regular'), url(https://fonts.gstatic.com/s/worksans/v3/QGYsz_wNahGAdqQ43Rh_fKDp.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
html,body{
  font-family: 'Work Sans', sans-serif;
}
html,body,main{
  min-height: 100%;
}

body {
  background:black;
  color:white;
}
main{
  padding: $padding;
}
h1,h2,h3,h4,h5,h6,label{
  text-align: center;
  text-transform: uppercase;
  display: block;
}
progress:not(value) {
    /* Add your styles here. As part of this walkthrough we will focus only on determinate progress bars. */
}


progress[value] {
  // reset default 
  appearance: none;
  
  // Get rid of default border in Firefox.
  border: none;
  
  // we must specify otherwise it will 
  width: 100%;
  height: 20px;
  position: relative;
  display: block;

  border:0;
  background-color: white;
 
  // ie 10 uses this to colour the progress bar
  color: black;

  // someday!
  // autoprefixer also is ignoring these!
  &::-webkit-progress-bar,
  &::-webkit-progress-value ,
  &::-moz-progress-bar,
  &::progress-bar{
    color: black;
    background-color: black;
    border:1px solid white;
  }

  // show value as text afterwards
  // also cover the usual crappy looking progress bar
  &:after { 
    content: ""; 
    // content: attr(value) "%"; 
    //transform: translateX(attr()); 
    width: 100%; 
    width: attr(value percentage, 0%); 
    position: absolute;
    left:0;
    top: 0;
    bottom:0;
    z-index:2;
    //background: purple;
    overflow: visible;
  } 
  // fake background :static
  &:before{
    content:'';
    position: absolute;
    top:0;
    left:0;
    right:0;
    bottom:0;
    z-index:1;
    //background: black;
  }
}

#progress{
  margin-top:$padding;
}


#warning{
  font-style: italic;
  margin:$padding 0 0 0;
  padding:$padding;
  border:1px dashed white;
  display: block;
}


.uploader{
  margin:$padding;
}

// yum yum
// shameless plug...
// look out for my *new* css / html framework coming 2019
// it's going to redefine accessibility, simplicity and 
// speed for everyone who is going to use it. zero learning curve.
// simply put : the fastest, most accessible css framework on earth
input[type=file]{

  position: relative;
  cursor: pointer;
  min-height: 3rem;
  border-radius:$border-radius;
  border:1px solid transparent;
  //color: transparent;

  &:before{

    // no need to set attr type as default is string
    content:'Select a file';  // fallback for <attr
    content:attr( placeholder);
    content:attr( placeholder, 'Select a file' );

    text-align: center;
    position: absolute;

    //z-index: 1;
    top:0;
    left:0;
    right:0;
    bottom: 0;

    color:black;
    background: white;

    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 195ms ease-out,background-color 195ms ease-out;
  }

  // cool inner border
  &:after{
    $gap:2px;
    content:'';
    position: absolute;
    //z-index: 1;
    top:$gap;
    left:$gap;
    right:$gap;
    bottom: $gap;

    border:1px solid black;
    border-radius:$border-radius;
    transition: border 195ms ease-out;
  } 

  &:focus,
  &:hover{
    border-color:white;

    &:before{
      background-color: black;
      color:white;
    }

    &:after{
      border-color:white;
    }
  }

 
}

// same as above but less portable
.uploader,
#uploader{
  display: block;
  width: 100%;
  
}


#selection{
  //padding:$padding;
  //border:1px solid white;
  position: relative;
  overflow: hidden;
  display:flex;
  align-items: center;
  flex-wrap:wrap;

  h3{
    position: relative;
    z-index: 1;
    background: black;
    display: inline-block;
    margin-left:auto;
    margin-right:auto;
    padding:0 10%;
  }

  &:before{
    content:'';
    top:27px;
    border:1px solid white;
    position: absolute;
    left:0;
    right:0;
    bottom:0;
    z-index:-1;
  }

  &:after{
    
  }
    
  #presets{

    list-style-type: none;
    margin:-$padding/2;
    padding:$padding;
    width:100%;
    display: flex;
    flex-wrap: wrap;
    justify-content:start;
    //justify-content: space-evenly;

    li{
      display: inline-flex;
      margin:$padding/2;
    }

    // li + li{
    //   margin-top:$padding;
    // }
  }

}

#words{

  overflow: hidden;

  #download{
    position: relative;
    bottom:auto;
    right:auto;
  }

  &.playing{

    #download{
      position: absolute;
      bottom:$padding;
      right:$padding;
    }
  }
}

#ticker{

  position: relative;
  height:100%;
  transition: color 45ms ease-out;
  padding:$padding 18px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size:5em;

  &.tick{
    //color:white;
    animation-name: fade-in;
  }
  &.tock{
    // background:white;
    // color:black;
    animation-name: fade-in; 
  }

  &.happy{
    // here we have determined that the overall sentiment is 
    // positive and that the user should be informed that there
    // is nothing to worry about...
    text-decoration: underline;
  }

  &.unhappy{
    background:white;
    color:black;
    font-style:bold;
  }

  // Wow, that was a deeply unpleasant word!
  &.fuck-you{
    animation: shake 0.82s cubic-bezier(.36,.07,.19,.97) both;
    transform: translate3d(0, 0, 0);
    backface-visibility: hidden;
    perspective: 1000px;
  }
}


#data{
  display: none;
}

#feedback{
  background-color: white;
  color: black;
  font-style: bold;
  padding:$padding;
}

button,
.preset{
  border-radius:4px;
  cursor: pointer;
  padding:$padding 18px;
  border:1px solid white;
  transition: color 195ms ease-out,background-color 195ms ease-out;
  display: inline-block;
  text-decoration: none;
  color:white;
   background: black;

  &:focus,
  &:hover{
    color:black;
    background: white;
    border-color: black;
    text-decoration: none;
  }

  &:active{
    outline: 1px solid white;
  }
}

.show{
  display: block;
}

.hide{
  display: none;
}

.vi{
  @extend %visually-hide;
}


// KEYFRAMES ==========================

@keyframes fade-in {
  from { opacity: 0; }
  to   { opacity: 1; }
}

@keyframes shake {
  10%, 90% {
    transform: translate3d(-1px, 0, 0);
  }
  20%, 80% {
    transform: translate3d(2px, 0, 0);
  }
  30%, 50%, 70% {
    transform: translate3d(-4px, 0, 0);
  }
  40%, 60% {
    transform: translate3d(4px, 0, 0);
  }
}

// PLACEHOLDERS ==================================

// To pass the w3c accessibility standards (see a11yproject.com)
// add this class to any element to visually hide it from the screen
// without affecting the other elements whilst also allowing
// the user to tab to focus and read the contents within them
// https://snook.ca/archives/html_and_css/hiding-content-for-accessibility
%visually-hide{

    position: absolute !important;
    height: 1px; width: 1px;
    overflow: hidden;
    // clip: rect(1px 1px 1px 1px); // IE6, IE7
    clip: rect(1px, 1px, 1px, 1px);

    a:focus,
    input:focus,
    button:focus {
        position:static;
        width:auto; height:auto;
    }
}